- xem package
	snap list |grep -v canonical
	apt-mark showmanual

-copy:
	cp -u from to : copy cái mới hơn
	cp -r from to: copy recursively
	cp -L from to : copy file gốc (thay vì copy symbolic link)

-remove:
	rm -rf:xóa sạch folder + file

- xem os,lsb version:
	cat /etc/os-release
	cat /etc/lsb-release
	lsb_release

- dry run rm:
	ls -R folder/

- copy file tới ssh:
	scp [other options] [source username@IP]:/[directory and file name] [destination username@IP]:/[destination directory]
	scp "C:\Users\long.trinh-tien\.ssh\id_rsa.pub" long.trinh-tien@192.168.2.25:~/.ssh ; sau đó lưu dưới tên authorized_keys

- Xem version của package:
	apt-show-versions name_of_package (chỉ show được package đã cài)
	apt show <package>

- Kiểm tra file trước khi xóa
	find [path-cần-kiểm-tra] -type d -exec echo '{}' \;

- ls, ll, l, la, tree -L num_of_child : xem file và thư mục
	ls -1 : xem list theo hàng dọc
		

- Xem thời gian execute:
	Linux: time + command
	Powershell: Measure-Command {.\do_something.ps1}

- Tạo nhiều thư mục:
	mkdir -p "$directory/another_dir/another_dir2"
	Hay được sử dụng với kiểm tra các thư mục có tồn tại hay ko : if[! -d "$directory"]; then ... fi

- đã cài thêm: apt-get
	pkg-config libx11-dev libxkbcommon-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev (doxygen >200MB) (mesa-common-dev 175MB)
	(raspi) :bison, flex, libssl-dev, libncurses-dev


-cross-compiler arm64 from linux: 
	export PATH=~/tools/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH
	make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu-

-Cách xài putty serial: 
	vào /dev/ttxx kiểm tra xem device mới input vào, kiểm tra baudrate/speed (rasp 115200)

- Cách xài docker
	viết Dockerfile FROM:ubuntu + command install package (nhớ -y)
	docker build -t name_in_lowercase . (tại thư mục chứa Dockerfile)
	docker run -it name_in_lowercase bash : tạo mới container
	docker run -rm name_in_lowercase: chạy xong xóa luôn container : để demo sản phẩm
	docker start nameOfContainer : khởi chạy container đã run ở trên
	docker attach nameOfContainer : vào trong container đó

- Cách để process chạy trên background (on shell only)
	Cho process chạy (VD: sleep 60s)
	Ấn Ctrl+Z để suspend process đó (hiện tại thì đang dừng)
	Ấn 'jobs' để xem các job đang suspend và lấy job_id (do chạy trên shell nên ta lấy job_id thay vì PID)
	Ấn 'bg job_id' (để chạy background) hoặc 'fg job_id' (để chạy foreground)

- Đợi 1 process khác xong
	Dùng hàm 'wait'

- Kill 1 process bất kì
	Ấn 'ps' (xem process của user chạy) 'ps -x' (process + command liên quan tới user) 'ps -u' (nhiều thông tin hơn)
	Hoặc ấn 'top' để xem toàn bộ process đang chạy
	Lấy PID và ấn 'kill -9 PID' là kill được 

- Mount 1 folder từ máy khác trong lan vào máy mình
	Install sshfs
		$ sudo apt-get install sshfs

	2.Create local mount point

		$ mkdir /home/johndoe/sshfs-path/

	3.Mount remote folder /remote/path to /home/johndoe/sshfs-path/

		$ sshfs -o allow_other remoteuser@111.222.333.444:/remote/path /home/johndoe/sshfs-path/

	And finally, to umount ...
		$ fusermount -u /home/johndoe/sshfs-path/

-Nén và giải nén zip
	zip -r name.zip folder
	unzip name.zip
	tar -cf folder (nén tar.gz)
	tar -xf folder.tar.gz (giải nén)

- Search trong file/tên file và trong lịch sử commit:
	git grep "word" 
	git ls-files "*name_of_file_to_search*"
	git log -p -S "commit_search"
	ack -g "name_file"
	grep -Rnw '/path/to/somewhere/' -e 'pattern' (-r or -R is recursive ; use -R to search entirely; -n is 
		line number; -w stands for match the whole word.

- Kiểm tra các file .pc khi sử dụng poky cross toolchains (đôi khi nó include 1 package mà máy ta không có -> lỗi)
	Xóa file hoặc unset PKG_CONFIG_PATH

- Kiểm tra md5sum xem file có giống nhau không
	md5sum FileName

- Kiểm tra pico có ai đang xài không
	ps aux | grep pico

- Kiểm tra tiến trình call gì 
	strace -p PID
- Truyền pass vào sudo:
	echo Pass1234 |sudo -S 'command go here'
- Spam 
	yes "word"

- Logout user
	sudo pkill -KILL -u username

- Lọc và đếm tổng số lượng unique 
	awk '{print $1}' example.txt | uniq | wc -l hoặc awk '{print $1}' example.txt | sort | uniq | wc -l

- chmod mọi thứ
	chmod -R 777 path/to/change/mode

- vim
	thêm dòng cuối : Shift+g (hoặc ctrl +d)  o
	thêm dòng đầu : gg (hoặc ctrl + u) shift+o
	exit và lưu ":wq"
	tới cuối dòng  $
	tới cuối trang :$ hoặc ctrl + end
	undo ctrl+u
	search : /word		next search: n

- tải package mannually bằng apt/apt-get
	apt download htop
	apt-get download libxml2-dev:arm64 (để cho arm64)
	dpkg-deb -x package.deb . Để giải nén

- để cài thủ công package cho poky toolchain/rootfs bất kì
	echo $SDKTARGETSYSROOT -> xem path sysroot
	pkg-config --variable=pc_path pkg-config -> xem nơi các file *.pc được đọc từ toolchain
	Chép file .pc vào rồi kiểm tra lại path include và link library trong file đó
	Thêm lib, module vào 
	
	Với file exec (trong bin hoặc sbin khi ta gõ lệnh nó sẽ hiện như htop) thì cần tìm tên
		readelf -d /path/to/bin
		objdump -x /path/to/bin (chưa test)
		Xong find các lib và chép qua

- find 
	find . -type f/d -name '*pattern*'

- dùng locate tìm
	locate pattern (chưa test kỹ)

- copy file giữ path (để xài cho việc chép vào poky)
	rsync -avR $(find . -name '*pciaccess*') destination_directory

- xem module info
	modinfo *.ko
	mobprobe ?
	depmod ?
	insmod + rmmod
	
- config linux kernel version magic
	Thông thường nếu ta không config gì thì version magic sẽ ra dạng : version.random_number. EX: 5.10.218.123456489
	Để thay đổi số version, ta vào Makefile ở thư mục ngoài cùng của kernel sẽ thấy các mục để thay đổi
		VERSION = 5
		PATCHLEVEL = 10
		SUBLEVEL = 218
		EXTRAVERSION =
	Và để thêm ngay sau version 1 dòng chữ thì thêm LOCALVERSION (thêm trực tiếp trên cmd )
		make -j16 modules LOCALVERSION=-yocto-standard
	Để xóa phần random_number thì tắt (comment)
		LOCALVERSION_AUTO=y